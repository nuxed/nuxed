namespace Nuxed\Test\Inflector;

use namespace Nuxed\Inflector;
use namespace Facebook\HackTest;
use function Facebook\FBExpect\expect;

class InflectorTest extends HackTest\HackTest {
  public function provideSingularizeData(
  ): Container<(string, Container<string>)> {
    // see http://english-zone.com/spelling/plurals.html
    // see http://www.scribd.com/doc/3271143/List-of-100-Irregular-Plural-Nouns-in-English
    return vec[
      tuple('accesses', vec['access']),
      tuple('addresses', vec['address']),
      tuple('agendas', vec['agenda']),
      tuple('alumnae', vec['alumna']),
      tuple('alumni', vec['alumnus']),
      tuple('analyses', vec['analys', 'analyse', 'analysis']),
      tuple('antennae', vec['antenna']),
      tuple('antennas', vec['antenna']),
      tuple('appendices', vec['appendex', 'appendix', 'appendice']),
      tuple('arches', vec['arch', 'arche']),
      tuple('atlases', vec['atlas', 'atlase', 'atlasis']),
      tuple('axes', vec['ax', 'axe', 'axis']),
      tuple('babies', vec['baby']),
      tuple('bacteria', vec['bacterion', 'bacterium']),
      tuple('bases', vec['bas', 'base', 'basis']),
      tuple('batches', vec['batch', 'batche']),
      tuple('beaux', vec['beau']),
      tuple('bees', vec['bee']),
      tuple('boxes', vec['box']),
      tuple('boys', vec['boy']),
      tuple('bureaus', vec['bureau']),
      tuple('bureaux', vec['bureau']),
      tuple('buses', vec['bus', 'buse', 'busis']),
      tuple('bushes', vec['bush', 'bushe']),
      tuple('calves', vec['calf', 'calve', 'calff']),
      tuple('cars', vec['car']),
      tuple('cassettes', vec['cassett', 'cassette']),
      tuple('caves', vec['caf', 'cave', 'caff']),
      tuple('chateaux', vec['chateau']),
      tuple('cheeses', vec['chees', 'cheese', 'cheesis']),
      tuple('children', vec['child']),
      tuple('circuses', vec['circus', 'circuse', 'circusis']),
      tuple('cliffs', vec['cliff']),
      tuple('committee', vec['committee']),
      tuple('crises', vec['cris', 'crise', 'crisis']),
      tuple('criteria', vec['criterion', 'criterium']),
      tuple('cups', vec['cup']),
      tuple('data', vec['data']),
      tuple('days', vec['day']),
      tuple('discos', vec['disco']),
      tuple('devices', vec['devex', 'devix', 'device']),
      tuple('drives', vec['drive']),
      tuple('drivers', vec['driver']),
      tuple('dwarves', vec['dwarf', 'dwarve', 'dwarff']),
      tuple('echoes', vec['echo', 'echoe']),
      tuple('elves', vec['elf', 'elve', 'elff']),
      tuple('emphases', vec['emphas', 'emphase', 'emphasis']),
      tuple('employees', vec['employee']),
      tuple('faxes', vec['fax']),
      tuple('fees', vec['fee']),
      tuple('feet', vec['foot']),
      tuple('feedback', vec['feedback']),
      tuple('foci', vec['focus']),
      tuple('focuses', vec['focus', 'focuse', 'focusis']),
      tuple('formulae', vec['formula']),
      tuple('formulas', vec['formula']),
      tuple('fungi', vec['fungus']),
      tuple('funguses', vec['fungus', 'funguse', 'fungusis']),
      tuple('garages', vec['garag', 'garage']),
      tuple('geese', vec['goose']),
      tuple('halves', vec['half', 'halve', 'halff']),
      tuple('hats', vec['hat']),
      tuple('heroes', vec['hero', 'heroe']),
      tuple(
        'hippopotamuses',
        vec['hippopotamus', 'hippopotamuse', 'hippopotamusis'],
      ), //hippopotami
      tuple('hoaxes', vec['hoax']),
      tuple('hooves', vec['hoof', 'hoove', 'hooff']),
      tuple('houses', vec['hous', 'house', 'housis']),
      tuple('indexes', vec['index']),
      tuple('indices', vec['index', 'indix', 'indice']),
      tuple('ions', vec['ion']),
      tuple('irises', vec['iris', 'irise', 'irisis']),
      tuple('kisses', vec['kiss']),
      tuple('knives', vec['knife']),
      tuple('lamps', vec['lamp']),
      tuple('lessons', vec['lesson']),
      tuple('leaves', vec['leaf', 'leave', 'leaff']),
      tuple('lice', vec['louse']),
      tuple('lives', vec['life']),
      tuple('matrices', vec['matrex', 'matrix', 'matrice']),
      tuple('matrixes', vec['matrix']),
      tuple('men', vec['man']),
      tuple('mice', vec['mouse']),
      tuple('moves', vec['move']),
      tuple('movies', vec['movie']),
      tuple('nebulae', vec['nebula']),
      tuple('neuroses', vec['neuros', 'neurose', 'neurosis']),
      tuple('news', vec['news']),
      tuple('oases', vec['oas', 'oase', 'oasis']),
      tuple('objectives', vec['objective']),
      tuple('oxen', vec['ox']),
      tuple('parties', vec['party']),
      tuple('people', vec['person']),
      tuple('persons', vec['person']),
      tuple('phenomena', vec['phenomenon', 'phenomenum']),
      tuple('photos', vec['photo']),
      tuple('pianos', vec['piano']),
      tuple('plateaux', vec['plateau']),
      tuple('poisons', vec['poison']),
      tuple('poppies', vec['poppy']),
      tuple('prices', vec['prex', 'prix', 'price']),
      tuple('quizzes', vec['quiz']),
      tuple('radii', vec['radius']),
      tuple('roofs', vec['roof']),
      tuple('roses', vec['ros', 'rose', 'rosis']),
      tuple('sandwiches', vec['sandwich', 'sandwiche']),
      tuple('scarves', vec['scarf', 'scarve', 'scarff']),
      tuple('schemas', vec['schema']), //schemata
      tuple('seasons', vec['season']),
      tuple('selfies', vec['selfie']),
      tuple('series', vec['series']),
      tuple('services', vec['service']),
      tuple('sheriffs', vec['sheriff']),
      tuple('shoes', vec['sho', 'shoe']),
      tuple('species', vec['species']),
      tuple('spies', vec['spy']),
      tuple('staves', vec['staf', 'stave', 'staff']),
      tuple('stories', vec['story']),
      tuple('strata', vec['straton', 'stratum']),
      tuple('suitcases', vec['suitcas', 'suitcase', 'suitcasis']),
      tuple('syllabi', vec['syllabus']),
      tuple('tags', vec['tag']),
      tuple('teeth', vec['tooth']),
      tuple('theses', vec['thes', 'these', 'thesis']),
      tuple('thieves', vec['thief', 'thieve', 'thieff']),
      tuple('treasons', vec['treason']),
      tuple('trees', vec['tree']),
      tuple('waltzes', vec['waltz', 'waltze']),
      tuple('wives', vec['wife']),
      // test casing: if the first letter was uppercase, it should remain so
      tuple('Men', vec['Man']),
      tuple('GrandChildren', vec['GrandChild']),
      tuple('SubTrees', vec['SubTree']),
      // Known issues
      //tuple('insignia', vec['insigne']),
      //tuple('insignias', vec['insigne']),
      //tuple('rattles', vec['rattle']),
    ];
  }

  <<HackTest\DataProvider('provideSingularizeData')>>
  public function testSingularize(
    string $word,
    Container<string> $expected,
  ): void {
    expect(Inflector\Inflector::singularize($word))->toBeSame($expected);
  }

  public function providePluralizeData(
  ): Container<(string, Container<string>)> {
    // see http://english-zone.com/spelling/plurals.html
    // see http://www.scribd.com/doc/3271143/List-of-100-Irregular-Plural-Nouns-in-English
    return vec[
      tuple('access', vec['accesses']),
      tuple('address', vec['addresses']),
      tuple('agenda', vec['agendas']),
      tuple('alumnus', vec['alumni']),
      tuple('analysis', vec['analyses']),
      tuple('antenna', vec['antennas']), //antennae
      tuple('appendix', vec['appendicies', 'appendixes']),
      tuple('arch', vec['arches']),
      tuple('atlas', vec['atlases']),
      tuple('axe', vec['axes']),
      tuple('baby', vec['babies']),
      tuple('bacterium', vec['bacteria']),
      tuple('base', vec['bases']),
      tuple('batch', vec['batches']),
      tuple('beau', vec['beaus', 'beaux']),
      tuple('bee', vec['bees']),
      tuple('box', vec['boxes']),
      tuple('boy', vec['boys']),
      tuple('bureau', vec['bureaus', 'bureaux']),
      tuple('bus', vec['buses']),
      tuple('bush', vec['bushes']),
      tuple('calf', vec['calfs', 'calves']),
      tuple('car', vec['cars']),
      tuple('cassette', vec['cassettes']),
      tuple('cave', vec['caves']),
      tuple('chateau', vec['chateaus', 'chateaux']),
      tuple('cheese', vec['cheeses']),
      tuple('child', vec['children']),
      tuple('circus', vec['circuses']),
      tuple('cliff', vec['cliffs']),
      tuple('committee', vec['committees']),
      tuple('crisis', vec['crises']),
      tuple('criteria', vec['criterion']),
      tuple('cup', vec['cups']),
      tuple('data', vec['data']),
      tuple('day', vec['days']),
      tuple('disco', vec['discos']),
      tuple('device', vec['devices']),
      tuple('drive', vec['drives']),
      tuple('driver', vec['drivers']),
      tuple('dwarf', vec['dwarfs', 'dwarves']),
      tuple('echo', vec['echoes']),
      tuple('elf', vec['elfs', 'elves']),
      tuple('emphasis', vec['emphases']),
      tuple('fax', vec['facies', 'faxes']),
      tuple('feedback', vec['feedback']),
      tuple('focus', vec['focuses']),
      tuple('foot', vec['feet']),
      tuple('formula', vec['formulas']), //formulae
      tuple('fungus', vec['fungi']),
      tuple('garage', vec['garages']),
      tuple('goose', vec['geese']),
      tuple('half', vec['halfs', 'halves']),
      tuple('hat', vec['hats']),
      tuple('hero', vec['heroes']),
      tuple('hippopotamus', vec['hippopotami']), //hippopotamuses
      tuple('hoax', vec['hoaxes']),
      tuple('hoof', vec['hoofs', 'hooves']),
      tuple('house', vec['houses']),
      tuple('index', vec['indicies', 'indexes']),
      tuple('ion', vec['ions']),
      tuple('iris', vec['irises']),
      tuple('kiss', vec['kisses']),
      tuple('knife', vec['knives']),
      tuple('lamp', vec['lamps']),
      tuple('leaf', vec['leafs', 'leaves']),
      tuple('lesson', vec['lessons']),
      tuple('life', vec['lives']),
      tuple('louse', vec['lice']),
      tuple('man', vec['men']),
      tuple('matrix', vec['matricies', 'matrixes']),
      tuple('mouse', vec['mice']),
      tuple('move', vec['moves']),
      tuple('movie', vec['movies']),
      tuple('nebula', vec['nebulae']),
      tuple('neurosis', vec['neuroses']),
      tuple('news', vec['news']),
      tuple('oasis', vec['oases']),
      tuple('objective', vec['objectives']),
      tuple('ox', vec['oxen']),
      tuple('party', vec['parties']),
      tuple('person', vec['persons', 'people']),
      tuple('phenomenon', vec['phenomena']),
      tuple('photo', vec['photos']),
      tuple('piano', vec['pianos']),
      tuple('plateau', vec['plateaus', 'plateaux']),
      tuple('poison', vec['poisons']),
      tuple('poppy', vec['poppies']),
      tuple('price', vec['prices']),
      tuple('quiz', vec['quizzes']),
      tuple('radius', vec['radii']),
      tuple('roof', vec['roofs', 'rooves']),
      tuple('rose', vec['roses']),
      tuple('sandwich', vec['sandwiches']),
      tuple('scarf', vec['scarfs', 'scarves']),
      tuple('schema', vec['schemas']), //schemata
      tuple('season', vec['seasons']),
      tuple('selfie', vec['selfies']),
      tuple('series', vec['series']),
      tuple('service', vec['services']),
      tuple('sheriff', vec['sheriffs']),
      tuple('shoe', vec['shoes']),
      tuple('species', vec['species']),
      tuple('spy', vec['spies']),
      tuple('staff', vec['staves']),
      tuple('story', vec['stories']),
      tuple('stratum', vec['strata']),
      tuple('suitcase', vec['suitcases']),
      tuple('syllabus', vec['syllabi']),
      tuple('tag', vec['tags']),
      tuple('thief', vec['thiefs', 'thieves']),
      tuple('tooth', vec['teeth']),
      tuple('treason', vec['treasons']),
      tuple('tree', vec['trees']),
      tuple('waltz', vec['waltzes']),
      tuple('wife', vec['wives']),
      // test casing: if the first letter was uppercase, it should remain so
      tuple('Man', vec['Men']),
      tuple('GrandChild', vec['GrandChildren']),
      tuple('SubTree', vec['SubTrees']),
    ];
  }

  <<HackTest\DataProvider('providePluralizeData')>>
  public function testPluralize(
    string $word,
    Container<string> $expected,
  ): void {
    expect(Inflector\Inflector::pluralize($word))->toBeSame($expected);
  }
}
